{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDAO","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","event","console","log","onerror","target","error","cursor","openCursor","negociacoes","ponteiroNegociacao","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","name","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAuB;AAAA;;AACnB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAW;AAAA;;AAEhB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACiB,WADjB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB,UAACC,KAAD,EAAW;AAC3BC,4BAAQC,GAAR,CAAY,kCAAZ;AACAT;AACH,iBAHD;;AAKAE,wBAAQQ,OAAR,GAAkB,UAACH,KAAD,EAAW;AACzBC,4BAAQC,GAAR,CAAYF,MAAMI,MAAN,CAAaC,KAAzB;AACAX,2BAAO,wCAAP;AACH,iBAHD;AAIH,aAhBM,CAAP;AAiBH;;;qCAEW;AAAA;;AAER,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,aAAD,CADJ,EACoB,WADpB,EAERC,WAFQ,CAEI,aAFJ,EAGRU,UAHQ,EAAb;;AAKA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,UAACC,KAAD,EAAW;AAC1B,wBAAIS,qBAAqBT,MAAMI,MAAN,CAAaM,MAAtC;;AAEA,wBAAGD,kBAAH,EAAsB;AAClB,4BAAIE,OAAQF,mBAAmBG,KAA/B;AACAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACAR,2CAAmBS,QAAnB;AACH,qBAJD,MAIK;AACDzB,gCAAQe,WAAR;AACH;AACJ,iBAVD;;AAYAF,uBAAOH,OAAP,GAAiB,UAACH,KAAD,EAAW;AACxBC,4BAAQC,GAAR,CAAYF,MAAMI,MAAN,CAAaC,KAAb,CAAmBc,IAA/B;AACH,iBAFD;AAGH,aAvBM,CAAP;AAwBH;;;qCAEW;AAAA;;AACR,mBAAO,IAAI3B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,aAAD,CADH,EACmB,WADnB,EAETC,WAFS,CAEG,aAFH,EAGTuB,KAHS,EAAd;;AAKAzB,wBAAQI,SAAR,GAAoB,UAACC,KAAD,EAAW;AAC3BP,4BAAQ,+CAAR;AACH,iBAFD;;AAIAE,wBAAQQ,OAAR,GAAkB,UAACH,KAAD,EAAW;AACzBC,4BAAQC,GAAR,CAAYF,MAAMI,MAAN,CAAaC,KAAzB;AACAX,2BAAO,6CAAP;AACH,iBAHD;AAIH,aAdM,CAAP;AAeH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDAO {\n\n    constructor(connection){\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao){\n\n        return new Promise((resolve, reject) => {\n\n            let request = this._connection\n                .transaction([this._store],'readwrite')\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = (event) => {\n                console.log('Negociação incluida com sucesso.');\n                resolve();\n            };\n\n            request.onerror = (event) => {\n                console.log(event.target.error);\n                reject('Não foi possível incluir a negociação.');\n            };\n        });\n    }\n\n    listaTodos(){\n\n        return new Promise((resolve, reject) => {\n            let cursor = this._connection\n                .transaction(['negociacoes'],'readwrite')\n                .objectStore('negociacoes')\n                .openCursor();\n\n            let negociacoes = [];\n\n            cursor.onsuccess = (event) => {\n                let ponteiroNegociacao = event.target.result;\n\n                if(ponteiroNegociacao){\n                    var dado =  ponteiroNegociacao.value;\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    ponteiroNegociacao.continue();\n                }else{\n                    resolve(negociacoes);\n                }\n            };\n\n            cursor.onerror = (event) => {\n                console.log(event.target.error.name);\n            };\n        });\n    }\n\n    apagaTodos(){\n        return new Promise((resolve, reject) =>{\n            let request = this._connection\n                .transaction(['negociacoes'],'readwrite')\n                .objectStore('negociacoes')\n                .clear();\n\n            request.onsuccess = (event) => {\n                resolve('Todas as negocições foram apagas com sucesso.');\n            };\n\n            request.onerror = (event) => {\n                console.log(event.target.error);\n                reject('Não foi possível apagar todas a negociações');\n            };\n        });\n    }\n}"]}