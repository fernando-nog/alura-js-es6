{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbNAme","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","event","_createStore","target","result","onsuccess","bind","onerror","error","name","forEach","store","objectStoreNames","contains","objectDeleteStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAW;;AAEhC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;;AAEA,QAAIC,aAAa,IAAjB;;AAEA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAa;AAAA;;AACT,kBAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM0B;;AAElB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,UAACC,KAAD,EAAW;;AAErCf,0CAAkBgB,YAAlB,CAA+BD,MAAME,MAAN,CAAaC,MAA5C;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,UAACJ,KAAD,EAAW;;AAE/B,4BAAG,CAACX,UAAJ,EAAe;AACXA,yCAAaW,MAAME,MAAN,CAAaC,MAA1B;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQO,MAAME,MAAN,CAAaC,MAArB;AACH,qBAVD;;AAYAR,gCAAYW,OAAZ,GAAsB,UAACN,KAAD,EAAW;AAC7BN,+BAAOM,MAAME,MAAN,CAAaK,KAAb,CAAmBC,IAA1B;AACH,qBAFD;AAGH,iBAvBM,CAAP;AAwBH;AAhCL;AAAA;AAAA,yCAkCwBnB,UAlCxB,EAkCmC;AAC3BH,uBAAOuB,OAAP,CAAe,UAACC,KAAD,EAAW;;AAEtB,wBAAGrB,WAAWsB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EAAgDrB,WAAWwB,iBAAX,CAA6BH,KAA7B;;AAEhDrB,+BAAWyB,iBAAX,CAA6BJ,KAA7B,EAAoC,EAACK,eAAe,IAAhB,EAApC;AAEH,iBAND;AAOH;AA1CL;AAAA;AAAA,8CA4C4B;AACpB,oBAAG1B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AAjDL;;AAAA;AAAA;AAoDH,CA9DuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["//Model Pattern\nvar ConnectionFactory = (function (){\n\n    const stores = ['negociaceos'];\n    const version = 4;\n    const dbNAme = 'aluraframe';\n\n    var connection = null;\n\n    var close = null;\n\n    return class ConnectionFactory {\n\n        constructor(){\n            throw new Error('Não é possível criar instâncias de Connection.');\n        }\n\n        static getConnection(){\n\n            return new Promise((resolve, reject) => {\n                let openRequest = window.indexedDB.open(dbNAme, version);\n\n                openRequest.onupgradeneeded = (event) => {\n                    \n                    ConnectionFactory._createStore(event.target.result);\n                }\n\n                openRequest.onsuccess = (event) => {\n                    \n                    if(!connection){ \n                        connection = event.target.result;\n                        close = connection.close.bind(connection);\n                        connection.close = function(){\n                            throw new Error('Não é possível fechar a conexão diretamente.');\n                        }\n                    }\n                    resolve(event.target.result);\n                }\n\n                openRequest.onerror = (event) => {\n                    reject(event.target.error.name);\n                }\n            });\n        }\n\n        static _createStore(connection){\n            stores.forEach((store) => {\n\n                if(connection.objectStoreNames.contains(store)) connection.objectDeleteStore(store);\n                \n                connection.createObjectStore(store, {autoIncrement: true});\n\n            });\n        }\n\n        static closeConnection(){\n            if(connection){\n                close();\n                connection = null;\n            }\n        }\n\n    }\n})();"]}