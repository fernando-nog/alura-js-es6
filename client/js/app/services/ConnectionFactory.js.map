{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbNAme","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","event","_createStore","target","result","onsuccess","bind","onerror","error","name","forEach","store","objectStoreNames","contains","objectDeleteStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,UAACC,KAAD,EAAW;;AAErCV,kDAAkBW,YAAlB,CAA+BD,MAAME,MAAN,CAAaC,MAA5C;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,UAACJ,KAAD,EAAW;;AAE/B,oCAAG,CAACZ,UAAJ,EAAe;AACXA,iDAAaY,MAAME,MAAN,CAAaC,MAA1B;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQO,MAAME,MAAN,CAAaC,MAArB;AACH,6BAVD;;AAYAR,wCAAYW,OAAZ,GAAsB,UAACN,KAAD,EAAW;AAC7BN,uCAAOM,MAAME,MAAN,CAAaK,KAAb,CAAmBC,IAA1B;AACH,6BAFD;AAGH,yBAvBM,CAAP;AAwBH;;;iDAEmBpB,U,EAAW;AAC3BH,+BAAOwB,OAAP,CAAe,UAACC,KAAD,EAAW;;AAEtB,gCAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EAAgDtB,WAAWyB,iBAAX,CAA6BH,KAA7B;;AAEhDtB,uCAAW0B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAACK,eAAe,IAAhB,EAApC;AAEH,yBAND;AAOH;;;sDAEuB;AACpB,4BAAG3B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["//Model Pattern\n\n\nconst stores = ['negociaceos'];\nconst version = 4;\nconst dbNAme = 'aluraframe';\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory {\n\n    constructor(){\n        throw new Error('Não é possível criar instâncias de Connection.');\n    }\n\n    static getConnection(){\n\n        return new Promise((resolve, reject) => {\n            let openRequest = window.indexedDB.open(dbNAme, version);\n\n            openRequest.onupgradeneeded = (event) => {\n                \n                ConnectionFactory._createStore(event.target.result);\n            }\n\n            openRequest.onsuccess = (event) => {\n                \n                if(!connection){ \n                    connection = event.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function(){\n                        throw new Error('Não é possível fechar a conexão diretamente.');\n                    }\n                }\n                resolve(event.target.result);\n            }\n\n            openRequest.onerror = (event) => {\n                reject(event.target.error.name);\n            }\n        });\n    }\n\n    static _createStore(connection){\n        stores.forEach((store) => {\n\n            if(connection.objectStoreNames.contains(store)) connection.objectDeleteStore(store);\n            \n            connection.createObjectStore(store, {autoIncrement: true});\n\n        });\n    }\n\n    static closeConnection(){\n        if(connection){\n            close();\n            connection = null;\n        }\n    }\n\n}"]}