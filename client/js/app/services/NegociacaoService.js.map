{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDAO","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","console","log","negociacoes","map","Date","objeto","data","quantidade","valor","catch","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","negociacao","getConnection","connection","dao","adiciona","Error","listaTodos","Errror","apagaTodos","listAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDAO} from '../dao/NegociacaoDAO';\nimport {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoService {\n    \n    constructor() {\n        \n        this._http = new HttpService();\n    }\n    \n    obterNegociacoesDaSemana() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                });  \n       });        \n    }\n    \n    obterNegociacoesDaSemanaAnterior() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana anterior');\n                });  \n       }); \n       \n        \n    }\n    \n    obterNegociacoesDaSemanaRetrasada() {\n       \n       return new Promise((resolve, reject) => {\n        \n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => {\n                    console.log(negociacoes);\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                })\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana retrasada');\n                });  \n       }); \n    }    \n    \n    \n    obterNegociacoes() {\n\n        return new Promise((resolve, reject) => {\n\n            Promise.all([\n                this.obterNegociacoesDaSemana(),\n                this.obterNegociacoesDaSemanaAnterior(),\n                this.obterNegociacoesDaSemanaRetrasada()\n            ]).then(periodos => {\n\n                let negociacoes = periodos\n                    .reduce((dados, periodo) => dados.concat(periodo), [])\n                    .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\n\n                resolve(negociacoes);\n\n            }).catch(erro => reject(erro));\n        });\n    }    \n\n    cadastra(negociacao){\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negocição adicionada com sucesso.')\n            .catch(()=>  {\n                throw new Error('Não foi possível adicionar a negociação.')\n            });\n    }\n\n    lista(){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.listaTodos())\n            .catch((erro) => {\n                console.log(`Erro ao listar todos: ${erro}`);\n                throw new Errror('Não foi possível listar todos.');\n            });\n    }\n\n    apaga(){\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDAO(connection))\n            .then(dao => dao.apagaTodos())\n            .then(mensagem => 'Negociacoes apagadas com sucesso.')\n            .catch((erro) => {\n                console.log(`Erro ao apagar todos: ${erro}`);\n                throw new Errror('Não foi possível listar todos.');\n            });\n    }\n\n    importa(listAtual){\n        return this.obterNegociacoes()\n        .then(\n            negociacoes => negociacoes.filter(negociacao => \n                !listAtual.some(negociacaoExistente =>\n                    JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)\n                )\n            )\n        ).catch((erro) => {\n            console.log(`Erro ao apagar todos: ${erro}`);\n            throw new Errror('Não foi possível listar todos.');\n        });\n    }\n}\n\n"]}